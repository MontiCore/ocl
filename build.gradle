// (c) https://github.com/MontiCore/monticore

/* ============================================================ */
/* ========================= Plugins ========================== */
/* ============================================================ */

buildscript {
  dependencies {
    classpath 'org.fusesource.jansi:jansi:2.3.2'
  }
}

plugins {
  id 'java'ft

  id 'de.monticore.generator' version "$mc_version"
  id 'com.github.johnrengelman.shadow' version '6.0.0'
  id "io.github.themrmilchmann.ecj" version "0.2.0"
  id 'jacoco'
  id 'com.adarshr.test-logger' version '2.1.1'
  id 'maven-publish'
  id "com.github.sherter.google-java-format" version "0.9"    // Task "verifyGoogleJavaFormat" and "googleJavaFormat"
}

/* ============================================================ */
/* ========================= Project ========================== */
/* ============================================================ */

group = 'de.monticore.lang'
buildDir = "$projectDir/target"

/* ============================================================ */
/* ======================== Constants ========================= */
/* ============================================================ */

def grammarDir = "$projectDir/src/main/grammars"
def reportsDir = "$buildDir/generated-sources/monticore/sourcecode/reports"
def symbolsDir = "$projectDir/src/main/resources"

/* ============================================================ */
/* ======================= Configuration ====================== */
/* ============================================================ */

sourceSets {
  symbols {
    resources {
      srcDirs(symbolsDir)
      include "**/*.sym"
    }
  }
  grammarsForVariant {
    resources {
      srcDirs(grammarDir, reportsDir)
      include("**/*.mc4", "**/*.cd")
    }
  }
}

repositories {
  if(("true").equals(getProperty('useLocalRepo'))) {
    mavenLocal()
  }

  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url sePublicRepo
  }

  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url sePrivateRepo
  }

  mavenCentral()
}


configurations {
    grammar
}


googleJavaFormat {
  exclude '**/target/**'
}

verifyGoogleJavaFormat{
  ignoreFailures true
  exclude "**"
}  // do not check format in "build"

task checkfmt(type: com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat) {
  dependsOn tasks.generateMCGrammars
}

task fmt {
  dependsOn tasks.named("googleJavaFormat")
}



test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

/* ============================================================ */
/* ======================= Dependencies ======================= */
/* ============================================================ */


dependencies {
  grammar "de.monticore:monticore-grammar:$mc_version"

  implementation "de.monticore:class2mc:$mc_version"
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"

  testImplementation ("de.monticore:monticore-grammar:$mc_version") {
      capabilities {requireCapability("de.monticore:monticore-grammar-tests") }
  }
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
  testImplementation "org.assertj:assertj-core:$assertj_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

/* ============================================================ */
/* ========================== Tasks =========================== */
/* ============================================================ */

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  options.encoding = 'UTF-8'
  options.headerOutputDirectory.convention(null)
  options.deprecation = false
  options.warnings = false
}

// build sources jar in addition
java {
  withJavadocJar()
  withSourcesJar()
  // Publish a feature-variant for compatibility - DEPRECATED
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammarsForVariant)
  }
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCGenTask)}

tasks.generateTestMCGrammars.dependsOn(tasks.grammarsForVariantJar)

// Ensure the grammars and GrammarsForVariant jars do not conflict
grammarsForVariantJar {
  archiveClassifier = "grammars-compat"
}

// Due to the report-CDs also being included, the following explicit dependency is required
tasks.processGrammarsForVariantResources.dependsOn(tasks.generateMCGrammars)

// generated java doc contains errors, disable for now
javadoc.failOnError(false)


task symbolJar(type: Jar) {
  from sourceSets.symbols.output
  includeEmptyDirs = false
  archiveBaseName = "ocl-library-symbols"
}

artifacts {
  archives symbolJar
}

jar.dependsOn(symbolJar)

publishing {
  publications {
    mavenJava(MavenPublication) {
        from components.java
    }
  }
  repositories.maven {
    name = "$SE_Nexus_ID"
    credentials.username mavenUser
    credentials.password mavenPassword
    url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
  }
}

