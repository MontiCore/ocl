// (c) https://github.com/MontiCore/monticore

/* ============================================================ */
/* ========================= Plugins ========================== */
/* ============================================================ */

buildscript {
  dependencies {
    classpath 'org.fusesource.jansi:jansi:2.3.2'
  }
}

plugins {
  id 'java'

  id 'monticore' version "$mc_version"
  id 'com.github.johnrengelman.shadow' version '6.0.0'
  //id 'de.set.ecj' version '1.4.1' // Eclipse compiler as it's faster than javac
  id 'jacoco'
  id 'com.adarshr.test-logger' version '2.1.1'
  id 'maven-publish'
  id "com.github.sherter.google-java-format" version "0.9"    // Task "verifyGoogleJavaFormat" and "googleJavaFormat"
}

/* ============================================================ */
/* ========================= Project ========================== */
/* ============================================================ */

group = 'de.monticore.lang'
buildDir = "$projectDir/target"

/* ============================================================ */
/* ======================== Constants ========================= */
/* ============================================================ */

def grammarDir = "$projectDir/src/main/grammars"
def reportsDir = "$buildDir/generated-sources/monticore/sourcecode/reports"

/* ============================================================ */
/* ======================= Configuration ====================== */
/* ============================================================ */

sourceSets {
  main {
    java.srcDirs += ["$buildDir/generated-sources/monticore/sourcecode"]
  }
  test {
    java.srcDirs += ["$buildDir/generated-test-sources/monticore/sourcecode"]
  }
  grammars {
    resources {
      srcDirs(grammarDir, reportsDir)
      include("**/*.mc4", "**/*.cd")
    }
  }
}

repositories {
  if(("true").equals(getProperty('useLocalRepo'))) {
    mavenLocal()
  }

  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url sePublicRepo
  }

  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url sePrivateRepo
  }

  mavenCentral()
}

//sourceCompatibility = '1.8'

configurations {
    grammar
}


googleJavaFormat {
  exclude '**/target/**'
}

verifyGoogleJavaFormat{
  ignoreFailures true
  exclude "**"
}  // do not check format in "build"

task checkfmt(type: com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat) {}

task fmt {
  dependsOn tasks.named("googleJavaFormat")
}



test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

/* ============================================================ */
/* ======================= Dependencies ======================= */
/* ============================================================ */


dependencies {
  grammar ("de.monticore:monticore-grammar:$mc_version") {capabilities {
    requireCapability("de.monticore:monticore-grammar-grammars") }
  }

  implementation "de.monticore:class2mc:$mc_version"
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
  implementation "com.google.guava:guava:$guava_version"
  implementation "org.antlr:antlr4-runtime:$antlr_version"
  implementation "de.monticore:monticore-runtime:$mc_version"
  implementation "de.monticore:monticore-grammar:$mc_version"
  implementation "org.apache.commons:commons-lang3:3.9"
  implementation "org.antlr:antlr4:4.7.1"
  implementation "org.assertj:assertj-core:$assertj_version"

  testImplementation ("de.monticore:monticore-grammar:$mc_version") {
      capabilities {requireCapability("de.monticore:monticore-grammar-tests") }
  }
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

configurations {
  ecj
}
dependencies {
  ecj 'org.eclipse.jdt:ecj:3.26.0'
}

/* ============================================================ */
/* ========================== Tasks =========================== */
/* ============================================================ */

tasks.withType(Test){
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
  options.fork = true
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  options.encoding = 'UTF-8'
  options.headerOutputDirectory.convention(null)
  options.deprecation = false
  options.warnings = false
  options.forkOptions.with {
    executable = 'java'
    jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn', "-Xmx2048m"]
  }
}

fileTree(grammarDir).matching { include '**/*.mc4' }.each {
  def g = it
  def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

  task "generateGrammar$grammarName"(type: MCTask) {
    grammar = file g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath = [file("$projectDir/src/main/java")]
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    def upToDate = incCheck(grammarIncludingPackage)
    outputs.upToDateWhen { upToDate }
  }
}

compileJava {
  tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
    def grammarName = it.getName().substring("generateGrammar".length())
  }

  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}


// build sources jar in addition
java {
  withJavadocJar()
  withSourcesJar()
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask)}


// generated java doc contains errors, disable for now
javadoc.failOnError(false)

shadowJar {
  manifest {
    attributes "Main-Class": "de.monticore.ocl.ocl.${archiveBaseName.get().toUpperCase()}Tool"
  }
  archiveFileName = "MC${archiveBaseName.get().toUpperCase()}.${archiveExtension.get()}"
  archiveClassifier = "mc-tool"
  minimize {
    exclude(dependency('org.freemarker:freemarker:.*'))
  }
}

jar.dependsOn(shadowJar)

publishing {
  publications {
    mavenJava(MavenPublication) {
        from components.java
    }
  }
  repositories.maven {
    name = "$SE_Nexus_ID"
    credentials.username mavenUser
    credentials.password mavenPassword
    url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
  }
}

