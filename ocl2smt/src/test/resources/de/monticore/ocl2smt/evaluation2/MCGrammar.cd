package de.monticore.ocl2smt.OCLDiff.newEvaluation;


import ArtifactModel.*;

classdiagram MCGrammar {

    class MCGrammarView extends ArtifactView {}

    association fileOf [1] MCGrammarView -> MCGrammar [1];

    class MCGrammar extends ArtifactInternal {
        String name;
        boolean component;
    }

    association isExtensionOf [*] MCGrammar -> MCGrammar [*];

    association contains [*] MCGrammar -> NonTerminal [*];

    association mcPackage [*] MCGrammar -> MCPackage [1];

    association startingNonTerminal [*] MCGrammar -> NonTerminal [0..1];

    class MCPackage {
      String qualifiedName;
    }

    association containsGrammar [1] MCPackage -> MCGrammar [*];

    // TODO Namen der Klassen / Attribute MCGrammar anpassen?
    class NonTerminal extends ArtifactInternal {
        String name;
        String fullName; // abgeleitet grammar.fullName + name
        List<String> tag;
        Optional<String> comment;
        boolean isSpanningScope;
        boolean hasSymbol;
        int srcPosition;
    }

    association productionRule [1] NonTerminal -> ProductionRule [0..1];

    class ProductionRule extends ArtifactInternal {
      String name;
      List<String> usedTerminals; //TODO possible analysis: overwriting / doubling keywords?
    }

    association usedNonTerminal [*] ProductionRule -> NonTerminal [*];

    association extension [1] NonTerminal -> NonTerminal [*];

    association implementation [1] NonTerminal -> NonTerminal [*];

    association isContainedBy [*] NonTerminal -> MCGrammar [1];

    abstract class Rule extends ArtifactInternal {
      //TODO
      String stringRepresentation;
    }

    class ASTRule extends Rule {}

    class SymbolRule extends Rule {}

    class ScopeRule extends Rule {}

}
