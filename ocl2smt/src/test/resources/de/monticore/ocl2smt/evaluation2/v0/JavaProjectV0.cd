package de.monticore.ocl2smt.evaluation2.v0;
import java.lang.String;
import java.util.Date;

// ______________________________________________________
// start- ArtifactModel
// ______________________________________________________

classdiagram JavaProjectV0{
   //______________________________________________________
   // Artifact and Root
   //______________________________________________________


   abstract class Artifact {
      String simpleName;
      String nameExtension;
      Date modified;
      String name;
      String fullName;
      boolean isRoot;
   }

   class FileArtifact extends Artifact {}

   association refersTo [*] Artifact -> (refersTo) Artifact [*];

   association produces [*] Artifact -> (produces) Artifact [*];

   class Root {
      boolean isExternal;
      String fullName;
      String name;
   }

   association root [*] Artifact -> Root [1];

   association ancestors [1] Root -> Artifact [*];

   association artifactRepresentation [1] Root -> Artifact [1];


   //______________________________________________________
   // ArtifactContainer
   //______________________________________________________

   abstract class ArtifactContainer extends Artifact {}

   class Directory extends ArtifactContainer {}

   class Archive extends ArtifactContainer {}

   association contains [0..1] ArtifactContainer(parent) -> (contains)Artifact [*] ;

   //______________________________________________________
   // ArtifactView
   //______________________________________________________

   abstract class ArtifactView{
      String name;
   }

   association views [1] Artifact <-> ArtifactView [*];

   //______________________________________________________
   // Internals
   //______________________________________________________

   abstract class ArtifactInternal{}

   association internals [1] ArtifactView <-> ArtifactInternal [*];

   //______________________________________________________
   // Metric
   //______________________________________________________

   abstract class Metric{}

   association artifactMetric [*] Artifact <-> Metric [*];

   association viewMetric [*] ArtifactView <-> Metric [*];

   association internalMetric [*] ArtifactInternal <-> Metric [*];

   //______________________________________________________
   // Start javaProject
   //______________________________________________________

   //______________________________________________________
   // JavaView: java source file (.java)
   //______________________________________________________

   // .java
   class JavaView extends ArtifactView{
      String fullName ;
      Date lastModified ;
   }

   association reliesOnJavaView [*] JavaView -> JavaView [*] ;

   association imports [*] JavaView(javaView) ->(imports)Artifact [*] ;

   association compiledTo [1] JavaView -> (compiledTo)Artifact [*] ;

  //______________________________________________________
  // JavaPackage
  //______________________________________________________

   class JavaPackage {
      String name;
      String fullName;
      boolean isRoot;
      Date lastModified ;
   }

   association belongsTo  [*]  JavaView  <->  (javaPackage)JavaPackage  [0..1] ;

   composition   [0..1]  JavaPackage (parent)  ->  (child) JavaPackage  [*] ;

   class ExternalJavaSource extends Artifact{}

    // ______________________________________________________
    // JavaType : class interface or enum
    // ______________________________________________________

    abstract class JavaType extends ArtifactInternal{
       String name;
       String fullName;
       boolean isInnerType;
    }

    association  [1] JavaView -> (definedTypes)JavaType [*] ;

    association  [1] JavaView -> (mainType)JavaType [1] ;

    association [0..1] JavaType(containingType) -> (innerType)JavaType [*] ;

    association  [*] JavaType -> (reliesOnJavaType)JavaType [*] ;

    association [1] JavaType -> (visibility )JavaVisibility [1];


    // ______________________________________________________
    // JavaClass
    // ______________________________________________________

    association  [*] JavaType -> (innerClasses)JavaClass [*];

    class JavaClass extends JavaType {
       boolean isFinal;
       boolean isStatic;
       boolean isAbstract;
    }

    association  [*] JavaClass -> (subclass)JavaClass [0..1] ;

    association  [*] JavaClass -> (interfaceImplementations)JavaInterface [*] ;

    association [1] JavaClass -> (variables )JavaVariable [*] ;

    // ______________________________________________________
    // JavaInterface
    // ______________________________________________________

    class JavaInterface extends JavaType {}

    association [*] JavaInterface -> (interfaces)JavaInterface [*] ;

    // ______________________________________________________
    // JavaVariable
    // ______________________________________________________

    class JavaVariable extends ArtifactInternal {
       String name;
       boolean isFinal;
       boolean isStatic;
       String type;
       String defaultValue;
    }

    association  [1] JavaVariable -> (visibility)JavaVisibility [1];

     // ______________________________________________________
     // JavaMethod
     // ______________________________________________________

    class JavaMethod extends ArtifactInternal {
       String name;
       boolean isFinal;
       boolean isStatic;
       String returnType;
    }

    association  [1] JavaType <-> (methods)JavaMethod [*];

    association [1] JavaMethod(javaMethod) -> (visibility)JavaVisibility [1];

    association [1] JavaMethod(javaMethod) -> (useVariables)JavaVariable [*];

    association  [1] JavaMethod <-> (params)JavaParameter [*];

    // ______________________________________________________
    // JavaParameter
    // ______________________________________________________

    class JavaParameter{
       String type;
       String name;
    }

    class JavaVisibility {
        boolean isPublic;
        boolean isPrivate;
        boolean isProtected;
        boolean isPackagePrivate;
        String name;
    }

    class JavaLinesOfCodeMetric extends Metric {
        int loc;
    }

}
